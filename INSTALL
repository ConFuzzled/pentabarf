---------------------------------------------------------------------
-This install guide is designed to go from a fresh install of Debian-
-6.0 64-Bit. It could be used for other distros (e.gGentoo/Ubuntu,  -
-FreeBSD) though locations and some commands will change!           - 
---------------------------------------------------------------------

---------------------------------------------------------------------
-Assumptions used in the writing of this installation guide aside   -
-from the operating system are as follows:                          -
-   * Pentabarf will run under a user called 'pentabarf'            -
-   * You have root access to the host system                       -
-   * All passwords are left at defaults or are the same as the user-
-   * Your Pentabarf checkout is in the home directory of the user  -
---------------------------------------------------------------------


In order to install pentabarf you first need the following software 
and libraries before beginning:

---------
-General-
---------

Apache 2
   * mod_proxy
   * mod_proxy_http
   * mod_proxy_balancer
   * mod_rewrite 
PostgreSQL >= 8.4.x <9.0
PostgreSQL contrib (for pgcrypto)
Ruby 1.8.7
Ruby-devel 1.8.7
rubygems
ImageMagick (image manipulation library)
libmagickcore-dev
libmagickwand-dev
librmagick-ruby
libMagick++-dev
libpq (postgresql client library)
libpq-dev
shared-mime-info
iconv (if not part of your ruby distribution)

----------------
-Ruby libraries-
----------------

NOTE:	You should install all Ruby libraries with gem. Do not try 
	to install them using your package manager otherwise you 
	will get issues.

XMPP4R				- [gem install xmpp4r]
RMagick				- [gem install rmagick -v=2.13.1 --no-ri --no-rdoc]
postgres (=0.7.9.2008.01.28)	- [gem install -v=0.7.9.2008.01.28 postgres]
Momomoto (>= 0.2.1)		- [gem install momomoto]
shared-mime-info		- [gem install shared-mime-info]
iCalendar			- [gem install -v=1.4.5 icalendar]
BlueCloth			- [gem install BlueCloth]
Mongrel				- [gem install mongrel]
Mongrel_cluster			- [gem install mongrel_cluster]
Rails (=2.3.14)			- [gem install -v=2.3.5 rails]


-----------
-Pentabarf-
-----------

You may either use the latest release or check out the current 
tree using git.

	git clone git://github.com/ConFuzzled/pentabarf.git

Currently the latest release is 0.5.0.


----------------
-Database Setup-
----------------

You should run the database installation as the same database user as 
you want the webapp to run. If the installation user does not have 
superuser privileges you have to activate PL/pgSQL for the database 
before running make install.

If you've installed the PostgresSQL server from the package manager
theres a good chance this is where you'll have a problem. Give the 
following command a try before reading on.

	createdb pentabarf

If after trying to create the database you recieved an error that 
looked alot like the following.

	createdb mydb
	createdb: could not connect to database postgres: FATAL:  Ident authentication failed for user "pentabarf"

Don't worry it just means you have IDENT authentication enabled and
the only user who can access it currently is "postgres" the only
problem with this is the we don't know the password to the default
superuser account so we'll have to side-step it slightly.

First, open a root terminal and issue the following command.

	su - postgres

Which should get you a terminal that looks like

	root@Duality:/home/pentabarf# su - postgres
	postgres@Duality:~$ 

Ok, so, from the system root account we are now the postgres superuser
now we need to add another user so we can create and access the database
without su'ing to postgres.

	createuser pentabarf

It will also ask you if you wish to make the account a superuser, for
the sake of making the rest of the install easier, answer yes. Now
hop back to a none root terminal and issue the create database
command again

	createdb pentabarf

It will take a moment or two and then give you the next prompt, if
you want to double check it's been done then try creating the same 
one again and Postgres will throw and error saying it already exists.

Now we're ready to carry on again.

	PGDATABASE=pentabarf 
	createlang plpgsql

Before you pull your hair over pentabarf.transaction_id error messages:
Pentabarf requires a PostgreSQL configuration change. You have to set

	custom_variable_classes = 'pentabarf'

in the postgresql.conf file (usually in /var/lib/postgresql/data 
or /etc/postgresql/[version]/main in ubuntu) and make PostgreSQL 
reload the configuration. it can be done without restarting the
whole server but it's again the easiest way to make sure it happens.
On Debian you do this with the following.

	sudo /etc/init.d/postgresql restart

In the sql directory of your checkout is a Makefile to create the 
database and all tables. The variable assignments are only necessary 
if you want to override the defaults used by psql (see the psql 
manpage for further information).

	cd ~/pentabarf/sql
	PGDATABASE=pentabarf
	make install

It will fill your terminal with alot of output and you will see
things that look like errors but they're just notices. To fill 
the tables with initial data.

	PGDATABASE=pentabarf
	make import

Your terminal will fill once again with lots of SET's and INSERT's
this is perfectly normal, it's just topped up the database with
some inital information. If you want to create an initial pentabarf 
user you can also issue the following command which will create a 
user 'pentabarf' with the password 'pentabarf.

	PGDATABASE=pentabarf
	make user

If you do not assign variables psql assumes the name of the database 
is the same as your username. The database is expected to exist.


-----------------------
-pgcrypto installation-
-----------------------

You need to install pgcrypto in the pentabarf database. Execute 
the following command in order to do so:

	psql -U pentabarf pentabarf < /usr/share/postgresql/<your-version>/contrib/pgcrypto.sql
 
The path might be slightly differently depending on your operating 
system/distribution. pgcrypto is usually packaged in postgresql-contrib 
or directly included your postgresql-server package.


-----------------------
-Momomoto installation-
-----------------------

You need to run the install.sql script that was installed with momomoto.
The path given in the following example is for Debian, on gentoo/ubuntu 
under /usr/lib/ruby/gems and FreeBSD under /usr/local/lib/ruby/gems.

	# cd /var/lib/gems/1.8/gems/momomoto-0.2.1/sql
	# psql < install.sql

	BEGIN
	CREATE SCHEMA
	CREATE TYPE
	CREATE TYPE
	CREATE FUNCTION
	CREATE FUNCTION
	COMMIT


-------------------------
-Pentabarf Configuration-
-------------------------

The Pentabarf configuration files are located in the rails/config 
directory  of your checkout. For all files described here there is a 
template file located in the directory (e.g database.yml.template)


-database.yml-

This is the file describing the way Pentabarf connects to the database. 
You should adjust it to reflect your setup. The important section in 
this file is the production section. The other sections are not used 
in normal operation.

	production:
	 adapter: postgresql
	 database: pentabarf
	 host: localhost
	 username: pentabarf
	 password: pentabarf


-jabber.yml-

This is the configuration file for sending debug messages via jabber. 
You don't have to configure this if you don't want to receive debug 
output with jabber, but I recommend using it because it's much easier 
to find bugs with jabber debug output enabled. The following table 
describes the meaning of the fields.

	Field		Value
	jabber_id	Jabber-ID of the component including resource 
			(it won't work if you forgot the resource)
	server		hostname of the server you are using
	port		port to connect to on the server
	password	password of the jabber account
	socket_path	filename for the socket opened by the bot
	recipients	list of recipients for the debug messages each 
			recipient stands on an extra line starting with 
			a dash


-mail.yml-

This is the configuration file for the mail subsystem. You don't have 
to configure this if the system running your Pentabarf installation 
has mail delivery configured locally otherwise you have to edit this 
file to reflect your setup.
Webserver Setup


------------------------------
-Installation/Webserver Setup-
------------------------------

If you haven't already installed Apache 2 while you had your package
manager open earlier on, go and do it now! Once that's installed it's 
time to enabled the extra modules you need. You need to do this
from a root terminal and if you're using Debian then there's a neat
time saving tools to help out.

	a2enmod

	Your choices are: <insert large list of modules here>
	...
	Which module(s) do you want to enable (wildcards ok)?

You then need to enter the following and hit enter.

	proxy proxy_http proxy_balancer

It's a good idea to restart Apache now.

	/etc/init.d/apache2 restart

Now it's time to add a little bit to the apache configuration file. 
This is all done on a fresh install of Debian so we're going to use 
Nano as our terminal text editor. This needs to be done from a root 
terminal.

	cd /etc/apache2/
	nano apache2.conf

Now you have the configuration file ytou need to add the following.

	<Proxy balancer://pentabarf>
	  BalancerMember http://127.0.0.1:8001
	  BalancerMember http://127.0.0.1:8002
	  BalancerMember http://127.0.0.1:8003

	  Order allow,deny
	  Allow from all
	</Proxy>

	RewriteEngine On
	RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} !-f
	RewriteRule ^/(.*)$ balancer://pentabarf%{REQUEST_URI} [P,QSA,L]

It can go in anywhere within the file. Once it's in, save it return
to the terminal. It's time to configure Mongrel so it's ready to run.

	cd ~/pentabarf/rails
	mongrel_rails cluster::configure -e production -p 8001 -N 3 -a 127.0.0.1

Now you're done with the root terminal so swap back to a user terminal
and it's time to try starting Pentabarf!

	cd ~/pentabarf/rails
	mongrel_rails cluster::start

This should generate the following if all is well.

	 $ mongrel_rails cluster::start
	 starting port 8001
	 starting port 8002
	 starting port 8003

Every time you want to start Pentabarf you will need to run the above 
command first.

==Simpler Alternative==

If you are just doing development and want to run a single instance of the app, you can start it using:

	script/server

Now you should have just watch Pentabarf start up, a successful start 
looks a little like the following.

	=> Booting Mongrel
	=> Rails 2.3.10 application starting on http://0.0.0.0:3000
	=> Call with -d to detach
	=> Ctrl-C to shutdown server


NOTE:	If you close the terminal that you started pentabarf from then
	you kill pentabarf too.


Now you should finally be able to try accessing Pentabarf via one of
the following from the local machine.

	http://0.0.0.0:3000	(user:pentabarf pass:pentabarf)
	http://localhost:3000	(user:pentabarf pass:pentabarf)
	http://127.0.0.1:3000	(user:pentabarf pass:pentabarf)


---------------------
-Upgrading Pentabarf-
---------------------

We recommend that you backup, or at least save, your existing 
installation. We also recommend taking a backup of your Pentabarf 
database. The upgrade process should never destroy any data. 
Regardless, nobody ever regrets making a backup.

If you are doing a minor upgrade, the rest of this page is for you. 
If you are upgrading from 0.2.x to 0.3.x, you should read the Upgrading 
from 0.2.x to 0.3.x instructions.

When upgrading, this is the recommended method (i.e upgrading in place). 
It avoids having to remember to copy over all the correct configuration 
files, etc:

	svn switch svn://svn.cccv.de/pentabarf/tags/NEW_VERSION

For example, if you are upgrading to 0.3.9, you should put 
0.3.9 instead of NEW_VERSION.

In the next steps you have to replace the values for PGDATABASE 
and PGUSER with the values used during your installation. If you 
followed the steps on this page both must be set to pentabarf 
(or whatever user and database name applies to your situation).

	export PGDATABASE=pentabarf
	export PGUSER=pentabarf

You will need to run the appropriate upgrade script from 
sql/maintenance. For example, if you are upgrading from 
0.3.6 to 0.3.7, you must run sql/maintenance/upgrade_0.3.6_to_0.3.7.sql

	psql < sql/maintenance/upgrade_0.3.6_to_0.3.7.sql

And in the SQL directory, you should run the following scripts:

	cd sql/
	psql < functions.sql
	psql < views.sql

-----
-CSS-
-----

To generate the CSS file:

$ cd rails/public/stylesheets
$ cat main.template | sed -e 's!.*"\(.*\)".*!\1!' | xargs cat > main.css
On BSD systems, you will probably want gmake, not make.
