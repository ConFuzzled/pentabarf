#!/usr/bin/env ruby

require 'yaml'

db_config_file = File.dirname(__FILE__) + "/../../rails/config/database.yml"
db_config      = YAML.load_file db_config_file
db_production  = db_config['production']

ENV['PGHOST']     = db_production['host']
ENV['PGDATABASE'] = db_production['database']
ENV['PGUSER']     = db_production['username']
ENV['PGPASSWORD'] = db_production['password']
ENV['PGPORT']     = db_production['port'].to_s

tables = ["auth.domain", "auth.object_domain", "language", "language_localized","auth.permission","auth.permission_localized","auth.role","auth.role_localized","auth.role_permission", "auth.conference_role", "auth.conference_role_localized", "auth.conference_role_permission", "conference_phase", "conference_phase_localized", "country", "country_localized", "currency", "currency_localized", "event_role", "event_role_localized", "event_role_state", "event_role_state_localized", "event_state", "event_state_localized", "event_state_progress", "event_state_progress_localized", "event_type", "event_type_localized", "link_type", "link_type_localized", "timezone", "transport", "transport_localized", "ui_message", "ui_message_localized", "conflict.conflict_level", "conflict.conflict_level_localized", "conflict.conflict_type", "conflict.conflict", "conflict.conflict_localized", "conflict.conference_phase_conflict", "attachment_type", "attachment_type_localized", "event_origin", "event_origin_localized", "mime_type", "mime_type_localized", "phone_type", "phone_type_localized", "im_type", "im_type_localized" ]

import = File.open('import.sql', 'w')
import.puts("BEGIN TRANSACTION;")
tables.each do | table |
  if !ARGV[0] || ARGV[0] == table
    puts "dumping table #{table}"

    schema = table.split('.').length == 2 ? table.split('.')[0] : 'public'
    dump_file = File.new( "#{table}.sql", 'w' )
    dump_file.puts("")
    dump_file.puts("SET client_encoding = 'UTF8';")
    dump_file.puts("SET search_path = #{schema}, pg_catalog;")
    dump_file.puts("")
    dump_file.close
    if ["ui_message","ui_message_localized"].member?( table )
      system("pg_dump -i -a --column-inserts -O -x -t #{table} | grep '^INSERT' | grep -v \"INSERT INTO \\w\\+ ([^)]\\+) VALUES ('custom_\\(person\\|event\\|conference_person\\|conference\\)\" | LANG=C sort >> #{table}.sql")
    else
      system("pg_dump -i -a --column-inserts -O -x -t #{table} | grep '^INSERT' | LANG=C sort >> #{table}.sql")
    end

  end

  import.puts("\\i #{table}.sql")
end
import.puts("COMMIT TRANSACTION;")


